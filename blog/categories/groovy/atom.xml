<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Blog de MakingDevs]]></title>
  <link href="http://blog.makingdevs.com/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://blog.makingdevs.com/"/>
  <updated>2016-07-19T20:59:32-05:00</updated>
  <id>http://blog.makingdevs.com/</id>
  <author>
    <name><![CDATA[MakingDevs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Android Con Groovy(otra Vez)]]></title>
    <link href="http://blog.makingdevs.com/2016/07/19/making-android-con-groovy-otra-vez/"/>
    <updated>2016-07-19T19:12:30-05:00</updated>
    <id>http://blog.makingdevs.com/2016/07/19/making-android-con-groovy-otra-vez</id>
    <content type="html"><![CDATA[<p>En las vísperas de la fecha en la que escribo este post, habíamos decidido entrar más de lleno con Android dentro del equipo de desarrollo, sin embargo, la convicción fue como siempre hacerlo de forma diferente, o por lo menos algo diferente con respecto a una industria que parecía siempre hacer lo mismo con lo mismo.</p>

<p>Es por ello que me gustaría escribirles al respecto de la experiencia que tuvimos usando Groovy en un proyecto Android, sé de antemano que la atención y los reflectores se encuentran en otros lenguajes, sin embargo, a nosotros nos ayudo muchísimo la  la experiencia que teníamos con el lenguaje pero usándolo en otro contexto muy distinto, y aunque no escribiremos todo lo que hicimos en este post, si les comentaremos en algunos más que fue lo que hicimos y como nos beneficiamos.</p>

<p>Explicarles como agregamos el plugin de Groovy dentro de un proyecto Android está de más, pueden consultarlo directamente en su <a href="https://github.com/groovy/groovy-android-gradle-plugin">repositorio de GitHub</a>. Lo que me gustaría mencionar es que ya está en una versión estable y confiable como para usarse.</p>

<!-- more -->


<h2>La estructura de un proyecto</h2>

<p>Al igual que un proyecto Android(Java), hay mucha similaridad integrando Groovy:</p>

<pre><code class="plain">▾ app/
  ▾ src/
    ▾ main/
      ▾ groovy/com/makingdevs/mybarista/
        ▾ common/
            CamaraUtil.groovy
            ImageUtil.groovy
            LocationUtil.groovy
            SingleFragmentActivity.groovy
            WithFragment.groovy
        ▾ database/
        ▾ model/
          ▸ command/
          ▸ repository/
            Comment.groovy
            GPSLocation.groovy
            S3Asset.groovy
            User.groovy
        ▾ network/
          ▾ impl/
              RetrofitTemplate.groovy
            FoursquareRestOperations.groovy
            S3AssetRestOperations.groovy
            UserRestOperations.groovy
        ▾ service/
            CommentManager.groovy
            CommentManagerImpl.groovy
            FoursquareManager.groovy
            FoursquareManagerImpl.groovy
            S3assetManager.groovy
            S3assetManagerImpl.groovy
        ▾ ui/
          ▾ activity/
              PrincipalActivity.groovy
          ▾ adapter/
              CommentAdapter.groovy
              UserAdapter.groovy
          ▾ fragment/
              CameraFragment.groovy
              CommentsFragment.groovy
        ▾ view/
            CustomFontTextView.groovy
      ▸ res/
    app.iml
    proguard-rules.pro
▾ fastlane/
    Appfile
    Fastfile
  android_app.iml
  Gemfile
  Gemfile.lock
  gradle.properties
  gradlew*
  gradlew.bat
  local.properties
  README.md
  settings.gradle
</code></pre>

<h2>Los modelos</h2>

<p>La ventaja de los POGOS de Groovy se siente al declarar o instanciar algún objeto de dominio:</p>

<pre><code class="groovy">import groovy.transform.CompileStatic

@CompileStatic
class User {
    String id
    String username
    String token
}
</code></pre>

<p>Ahora instanciamos nuestra clase en cualquier parte:</p>

<pre><code class="groovy">User getUserSession(Context context) {
    SharedPreferences session = context.getSharedPreferences("UserSession",Context.MODE_PRIVATE)
    String username = session.getString("username",null);
    String token = session.getString("token",null)
    String id = session.getString("id",null)
    new User(username:username,token:token,id:id)
}
</code></pre>

<p>La nota <strong>importante</strong> aquí es la forma de la instanciación y que no hay palabra reservada <code>return</code>, al igual que la declaración del método como <code>public</code> no es necesaria. Además de que puedes llamar de forma abreviada a sus atributos.</p>

<h2><code>@StaticCompile</code></h2>

<p><strong>Groovy es un lenguaje de tipado dinámico opcional</strong>, lo cuál significa que podemos beneficiarnos de ciertos elementos del lenguaje y estar seguros de que compilará correctamente; esta anotación hace al compilador mas estricto, con la ventaja de optimizar el código de byte dando como resultado una mejor ejecución. Los desarrolladores recomiendan el uso intenso de esta anotación en todas las clases dentro del proyecto Android:</p>

<pre><code class="groovy">import android.content.Context
import android.content.Intent
import android.support.v4.app.Fragment
import com.makingdevs.app.common.SingleFragmentActivity
import com.makingdevs.app.ui.fragment.RegistrationFragment
import groovy.transform.CompileStatic

@CompileStatic
class RegistrationActivity extends SingleFragmentActivity{

    static Intent newIntentWithContext(Context context){
        Intent intent = new Intent(context, RegistrationActivity)
        intent
    }

    @Override
    Fragment createFragment() {
        new RegistrationFragment()
    }
}
</code></pre>

<p>Realmente este es un tema que se puede extender un poco más, pero iniciando con esto es suficiente.</p>

<h2>Los closures</h2>

<p>Para quién ya ha programado en Groovy conocerá que los closures son un elemento fundamental, para quiénes no, podrán compararlos con las lambdas de Java 8 o simplemente como lo que son: closures.</p>

<p>La forma general del closure en Groovy es:</p>

<pre><code class="groovy">{ p1,p2,p3... -&gt; body }
</code></pre>

<p>Y creo que es de las partes de las que más podemos comentar, incluso creo que cada beneficio particular que nos da Groovy con los closures lo podremos comentar en un post por separado.</p>

<h3>Implementando interfaces con Closures</h3>

<p>El evento más solicitado dentro de una app Android es el <em>click</em> de un componente, con un closure podemos tratarlo:</p>

<pre><code class="groovy">@CompileStatic
public class SomeFragment extends Fragment {

    FloatingActionButton mButtonGoChekin

    // ...more code...

    @Override
    View onCreateView(LayoutInflater inflater,
                      @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {

        mButtonGoChekin= (FloatingActionButton) root.findViewById(R.id.button_go_chekin)
        mButtonGoChekin.onClickListener = {
            Intent intent = AnotherActivity.newIntentWithContext(getContext())
            startActivity(intent)
        }
    }
}
</code></pre>

<p>Ahora aquí una de las que más me gusta en conjunto con otra anotación de Groovy <code>@Singleton</code>, de la cual hablaremos en otro post.</p>

<pre><code class="Groovy">@Singleton
@CompileStatic
class RetrofitTemplate {

    Retrofit retrofit = new Retrofit.Builder()
            .addConverterFactory(GsonConverterFactory.create())
            .baseUrl(BuildConfig.API_SERVER_URL)
            .build()

    def withRetrofit(Class operations, Closure onSuccess, Closure onError, Closure action){
        CustomRestOperations restOperations = retrofit.create(operations) as CustomRestOperations
        Call&lt;Checkin&gt; model = action(restOperations) as Call&lt;Checkin&gt;
        def callback = [
                onResponse :onSuccess,
                onFailure : onError
        ]
        model.enqueue(callback as Callback&lt;Checkin&gt;)
    }
}
</code></pre>

<p><strong>Podemos hacer que un mapa se comporte como la implementación de una interfaz</strong>, es sólo cuestión de usar los closures correctamente. Y también podemos ejecutar closures para mandarles parámetros listos para usarse en otros contextos.</p>

<h2>Conclusión</h2>

<p>Si bien, Groovy agrega peso a las aplicaciones Android, creo que cada byte y cada línea vale todo lo que no tuvimos que codificar, la fluidez en el teclado y la productividad ganada.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uso De Logback]]></title>
    <link href="http://blog.makingdevs.com/2016/03/28/logger-logback/"/>
    <updated>2016-03-28T09:13:56-06:00</updated>
    <id>http://blog.makingdevs.com/2016/03/28/logger-logback</id>
    <content type="html"><![CDATA[<p>En el proceso de desarrollo de software se implementan bitácoras o mejor conocidas como <em>loggers</em> que permiten tener información de salida útil al desarrollador en cuanto al correcto flujo de la aplicación.</p>

<p>Este registro se divide en secciones: Logger, Formatter y Handler.</p>

<!-- more -->


<ul>
<li><p><em>Logger</em>: Es el responsable de captar el mensaje y pasarlo al marco de registro.</p></li>
<li><p><em>Formatter</em>: Su función es dar formato a la salida. toma el objeto binario y realiza la conversión a una representación de cadena</p></li>
<li><p><em>Appender</em> o <em>Handler</em>: Se le entrega el mensaje con formato al Appender, el cual puede ser visualizado en diferentes formas como son: consola, archivo, base de datos, servicios de mensajería, escribir en un socket.</p></li>
</ul>


<p>Existen ciertos niveles de logger para diferenciar el tipo de salida que queremos generar:</p>

<table>
<thead>
<tr>
<th><strong>Nivel</strong> </th>
<th>    <strong>Descripción</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>FATAL </td>
<td>    Errores graves que causan la terminación prematura</td>
</tr>
<tr>
<td>ERROR </td>
<td>    Otros errores de ejecución o condiciones inesperadas</td>
</tr>
<tr>
<td>WARNING </td>
<td>  Se utiliza para situaciones que podrían ser potencialmente dañinas</td>
</tr>
<tr>
<td>INFO </td>
<td> Eventos interesantes de tiempo de ejecución (inicio / apagado)</td>
</tr>
<tr>
<td>DEBUG </td>
<td>    Información detallada sobre el flujo a través del sistema</td>
</tr>
<tr>
<td>TRACE </td>
<td>    Información más detallada</td>
</tr>
</tbody>
</table>


<h1>Logback</h1>

<p>Este logger pretende ser el sucesor de log4j, fue diseñado por Ceki Gülcü, fundador de log4j&rsquo;s.
Para poder usar este logger, se requiere del módulo logback.
Una configuración del archivo gradle queda de la siguiente manera:</p>

<pre><code class="groovy">apply plugin:'groovy'

repositories{
  jcenter()
}

dependencies{
  compile 'org.codehaus.groovy:groovy-all:2.4.4'
  compile 'ch.qos.logback:logback-classic:1.1.6'
}
</code></pre>

<p>El archivo groovy que se estará manejando para obtener la bitácora será <em>logback.groovy</em> el cual contiene el patrón de salida del logger además de especificar donde se mostrara dicha información.</p>

<pre><code class="groovy">import static ch.qos.logback.classic.Level.INFO
import static ch.qos.logback.classic.Level.DEBUG

import ch.qos.logback.classic.encoder.PatternLayoutEncoder
import ch.qos.logback.core.ConsoleAppender

appender("CONSOLE", ConsoleAppender) {
  encoder(PatternLayoutEncoder) {
    pattern = "%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %n"
  }
}

appender("FILE", FileAppender) {
  file = "example_logger.log"
  append = true
  encoder(PatternLayoutEncoder) {
    pattern = "%d{HH:mm:ss.SSS} %-5level %logger{30} %msg %n"
  }
}
root(DEBUG, ["CONSOLE","FILE"])
</code></pre>

<p>Ahora el archivo se crea una instancia de la clase Logger. Además de contar con el nivel del logger, respetando la configuración que se hizo en el archivo logback.groovy.</p>

<pre><code class="groovy">import org.slf4j.Logger
import org.slf4j.LoggerFactory

Logger log = LoggerFactory.getLogger(getClass())

log.debug "*"*40
log.debug request.properties.toString()
log.error "Error"
log.warn "Warning"
log.info "Info"
log.trace "Trace"
</code></pre>

<p>Un ejemplo de como se vería:</p>

<p><img class="left" src="/images/logback.png" title="&lsquo;Logback&rsquo; &lsquo;images&rsquo;" ></p>

<h2>Acerca del patrón de salida</h2>

<ul>
<li><code>%d{HH:mm:ss.SSS}</code> Es la hora que se realizo el proceso</li>
<li><code>[%thread]</code> Indica el thread que inicio la tarea</li>
<li><code>%highlight(%-5level)</code> Brinda el color acorde al nivel de logger que se esta usando</li>
<li><code>%cyan(%logger{15})</code> Muestra el nombre de la clase que esta tomando el logger, en color azul</li>
<li><code>%msg</code> Muestra el msn que se manda acorde al nivel que se esta llamando</li>
<li><code>%n</code> Indica el final de la línea</li>
</ul>


<p>Pueden encontrar el código de ejemplo <a href="https://github.com/reyes271292/logger_logback"><em>aquí</em></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MicroServicios Con Groovy]]></title>
    <link href="http://blog.makingdevs.com/2016/03/08/microservicios-con-groovy/"/>
    <updated>2016-03-08T21:38:08-06:00</updated>
    <id>http://blog.makingdevs.com/2016/03/08/microservicios-con-groovy</id>
    <content type="html"><![CDATA[<p>Si bien, existen muchas tecnologías muy completas que permiten la creación de servicios robustos, a veces me he visto en la necesidad de hacer algo pequeño. muy concreto pero mantenible, y que pueda soportar un volumen determinado. Es por esto que me he apoyado del poder que ofrece Groovy con ayuda de los <a href="http://docs.groovy-lang.org/latest/html/api/groovy/servlet/GroovyServlet.html">Groovlets</a>.</p>

<p>La parte que me gusta de este acercamiento es que el poder del Scripting se pasa al navegador, o en este caso, a un cliente que consume algún servicio web. Cuando usamos <em>Groovlets</em> tenemos disponible lo sisguiente:</p>

<ul>
<li><em>request</em> - <code>HttpServletRequest</code></li>
<li><em>response</em> - <code>HttpServletResponse</code></li>
<li><em>application</em> - <code>ServletContext</code></li>
<li><em>session</em> - <code>HttpSession</code></li>
<li><em>out</em> - <code>PrintWriter</code></li>
<li><em>headers</em> - <code>Header[]</code></li>
<li><em>params</em> - Un objeto tipo <code>Map</code> que contiene los parámetros</li>
</ul>


<!-- more -->


<p>Ahora bien, que la configuración XML si es el caso es muy sencilla y sólo tenemos que agregar el Servlet de Groovy y hacer el mapeo.</p>

<pre><code class="xml">&lt;servlet&gt;
  &lt;servlet-name&gt;Groovy&lt;/servlet-name&gt;
  &lt;servlet-class&gt;groovy.servlet.GroovyServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;Groovy&lt;/servlet-name&gt;
  &lt;url-pattern&gt;*.groovy&lt;/url-pattern&gt;
  &lt;url-pattern&gt;*.gdo&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>

<p><em>Nota: Que el mapeo no necesariamente es estricto con la extensión, podemos usar la que querramos.</em></p>

<p>Y aunque la implementación que muestro no sería la más <em>adecuada</em>, sirve de ejemplo para mostrar en pocas líneas la mayoría de los elementos antes mencionado:</p>

<p>Me apoyo de un par de clases que <em>modelan</em> un almacén de datos.</p>

<pre><code class="groovy todos.groovy">class Todo {
  String description
}

@Singleton // Only one instance
class TodoManager {
  List&lt;Todo&gt; todos = []
}
</code></pre>

<p>Podemos jugar con el reponse directamente para decirle que cualquier respuesta sería JSON:</p>

<pre><code class="groovy todos.groovy">response.contentType = 'application/json'
</code></pre>

<p>Buscar algún encabezado en particular para validar nuestra solicitud:</p>

<pre><code class="groovy todos.groovy">def contentType = headers.find { k,v -&gt; k.toLowerCase() == 'content-type' }?.value

if(contentType != "application/json"){
  response.status = HttpServletResponse.SC_BAD_REQUEST // We return a status code 400
  // Using the json method included
  json(status:"Please use 'application/json' header, just received ${headers} instead")
  return // And nothing more...
}
</code></pre>

<p>A partir de aquí podemos jugar con el método de envío y hacer algunas acciones, aquí una muestra muy simple:</p>

<pre><code class="groovy todos.groovy">switch(request.method.toLowerCase()){ // Validating the method
  case 'get':
    json(todos:TodoManager.instance.todos) // Using the instance
  break
  case 'post':
    Todo todo = new Todo(description:params?.todo ?: "No description")
    TodoManager.instance.todos &lt;&lt; todo
    response.status = HttpServletResponse.SC_CREATED
    json(todo:todo)
  break
  default:
    response.status = HttpServletResponse.SC_BAD_REQUEST
    json(status:"Method '${request.method.toLowerCase()}' not supported")
}
</code></pre>

<p>Puedes incluir estos tres últimos fragmentos en un archivo y todo funcionará sin problemas. Aunque, nuevamente no es la forma más adecuada, muestra muy bien el potencial del simple uso del Groovlet.</p>

<p>Al final podrías usar <code>@Grab</code> para obtener las dependencias de <em>Jetty</em> y levantar el contenedor en el mismo archivo.</p>

<p><strong>Conclusión</strong>: En un par de líneas puedes conseguir un servicio pequeño, entendible y listo para pasarse a un proyecto de Gradle que permita estructurarlo mejor para irle creciendo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitacorado De Pruebas en Gradle]]></title>
    <link href="http://blog.makingdevs.com/2016/01/22/bitacorado-de-pruebas-en-gradle/"/>
    <updated>2016-01-22T18:14:37-06:00</updated>
    <id>http://blog.makingdevs.com/2016/01/22/bitacorado-de-pruebas-en-gradle</id>
    <content type="html"><![CDATA[<p>Hace tiempo al correr unas pruebas con un proyecto de gradle tuve la necesidad de saber el orden y la forma en que se estaban corriendo ciertas pruebas, gradle arroja este resultado al final de la ejecución, sin embargo yo quería un bitacorado al momento de la ejecución, para lo cual buscando en la documentación me encontre con el <a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.logging.TestLoggingContainer.html">TestLoggingContainer</a>, del cual pude obtener este fragmento:</p>

<pre><code class="java">apply plugin: 'java'

test {
  testLogging {
    // set options for log level LIFECYCLE
    events "failed"
      exceptionFormat "short"

      // set options for log level DEBUG
      debug {
        events "started", "skipped", "failed"
          exceptionFormat "full"
      }

    // remove standard output/error logging from --info builds
    // by assigning only 'failed' and 'skipped' events
    info.events = ["failed", "skipped"]
  }
}
</code></pre>

<p>En donde pongo todo los tipos de eventos del proyecto que son <code>events "started", "passed", "skipped", "failed"</code> y con ello obtengo una salida como la siguiente:</p>

<p><img src="/images/test_logging.png" alt="Screenshot 1" /></p>

<p>Muy útil cuando no queremos hacer bitácora manual de que pruebas se están corriendo, Gradle ya cuenta con ella.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon S3 Y Groovy]]></title>
    <link href="http://blog.makingdevs.com/2015/08/13/amazon-s3-y-groovy/"/>
    <updated>2015-08-13T22:47:08-05:00</updated>
    <id>http://blog.makingdevs.com/2015/08/13/amazon-s3-y-groovy</id>
    <content type="html"><![CDATA[<p>En una de las tareas que realice recientemente, tuve la necesidad de transferir un par de archivos que obtuve de un endpoint(de la cual hablaré en otro post) hacia un Bucket de Amazon S3.</p>

<p>La solución inmediata fue usar una biblioteca que encontré para Java de nombre <a href="http://www.jets3t.org/">jets3t</a>, la cual, provee de un conjunto de herramientas muy simple para operar con Amazon S3, Cloud Front y Google Storage.</p>

<p>El caso muy puntual que tuve que resolver fue subir un archivo y despúes borrarlo de un bucket muy particular. En este ejemplo muestro primero como listar todos los buckets disponibles en una cuenta de S3.</p>

<!-- more -->


<pre><code class="groovy">@Grapes(
    @Grab(group='net.java.dev.jets3t', module='jets3t', version='0.9.3')
)

import org.jets3t.service.security.*
import org.jets3t.service.*
import org.jets3t.service.impl.rest.httpclient.*
import org.jets3t.service.model.*
import org.jets3t.service.acl.*

String awsAccessKey = "YOURAWSACCESSKEY"
String awsSecretKey = "YOURAWSSECRETKEY"

AWSCredentials awsCredentials = new AWSCredentials(awsAccessKey, awsSecretKey)
S3Service s3Service = new RestS3Service(awsCredentials)

S3Bucket[] myBuckets = s3Service.listAllBuckets()
</code></pre>

<p>Despúes, una vez con todos los buckets, podemos listar los archivos contenidos dentro de bucket muy particular.</p>

<pre><code class="groovy">String bucletName = "makingdevs-bucket"

bucket = myBuckets.find { it.name==bucketName }

s3Objects = s3Service.listObjects(bucket)
</code></pre>

<p>Finalmente, podemos subir un archivo específico hacia el bucket que deseamos.</p>

<pre><code class="groovy">
file = new File("/some/file/in/your/filesystem.ext")

S3Object s3Object = new S3Object()
s3Object.with {
  setAcl AccessControlList.REST_CANNED_PUBLIC_READ
  setContentLength file.length()
  setContentType file.toURL().openConnection().contentType
  setDataInputFile file
  setKey file.name
  setBucketName bucket.getName() // we use our previous bucket
}

s3Service.putObject bucket, s3Object
</code></pre>

<p>Una vez que llamamos al servicio <code>s3Service</code> el archivo queda colocado en el bucket. Y finalmente si deseamos borrarlo podemos usar <code>s3Service.deleteObject s3Bucket, s3Object.key</code>, en donde sólo mandamos el objeto del bucket y el <em>key</em> del objeto que deseamos borrar.</p>

<p>Finalmente, me gustaría detallar dos líneas que en mi opinión son relevantes:</p>

<ul>
<li>La parte de <code>acl AccessControlList.REST_CANNED_PUBLIC_READ</code>, la cual indica que el archivo que se sube es de acceso público para quién quiera que tenga la URL y sólo el propietario puede modificar, existen otras constantes que dan combinaciones de permisos distintos en <a href="http://www.jets3t.org/api/org/jets3t/service/acl/AccessControlList.html">la documentación de JetS3t</a>.</li>
<li>La línea con <code>contentType file.toURL().openConnection().contentType</code> que es una forma de obtener el <em>content type</em> sin la necesidad de una biblioteca adicional, sólo con el uso convencional de las clases Java con las que ya contamos. Les recomiendo tomar cualquier archivo y probar sólo esa línea.</li>
</ul>


<p>Si bien hay más cosas que se pueden hacer, les sugiero se den una vuelta por la documentación de esta biblioteca.</p>
]]></content>
  </entry>
  
</feed>
